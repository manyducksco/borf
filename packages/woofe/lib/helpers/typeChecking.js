import OBSERVABLE from "symbol-observable";
import { READABLE, WRITABLE } from "../keys.js";
import { Connectable } from "../classes/Connectable.js";
import { Store } from "../classes/Store.js";
import { View } from "../classes/View.js";
import { extendsClass } from "./extendsClass.js";

export const isArray = (value) => Array.isArray(value);
export const isBoolean = (value) => value === true || value === false;
export const isClass = (value) => typeof value === "function" && /^\s*class\s+/.test(value.toString());
export const isConnectable = (value) => isClass(value) && extendsClass(Connectable, value);
export const isDOM = (value) => value != null && (value instanceof Node || value.isDOM === true);
export const isFunction = (value) => typeof value === "function" && !isClass(value);
export const isNumber = (value) => typeof value === "number";
export const isObject = (value) => value != null && typeof value === "object" && !isArray(value);
export const isObservable = (value) => (value && value[OBSERVABLE] && value === value[OBSERVABLE]()) || false;
export const isReadable = (value) => (value && value[READABLE] && value === value[READABLE]()) || false;
export const isStore = (value) => isClass(value) && extendsClass(Store, value);
export const isString = (value) => typeof value === "string";
export const isView = (value) => isClass(value) && extendsClass(View, value);
export const isWritable = (value) => (value && value[WRITABLE] && value === value[WRITABLE]()) || false;
